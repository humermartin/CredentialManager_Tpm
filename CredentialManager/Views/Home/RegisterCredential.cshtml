@using CredentialManager.Controllers
@model CredentialManager.ViewModels.CredentialRegisterViewModel

@{
    ViewBag.Title = "RegisterCredential";
}

@using (Html.BeginForm("RegisterCredential", "Home", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    <div class="form-horizontal">
        @Html.AntiForgeryToken()
        <p>
            <h4 style="float: left">Create a new store account.</h4>

            
            <h4 style="float: right; margin-right: 10px;">@Html.ActionLink("Manage Credential", "ManageCredential")</h4>
            @if (User.IsInRole("Administrator"))
            {
                <h4 style="float: right; margin-right: 10px; color: #337ab7; margin-top: 7px;">|</h4>
                <h4 style="float: right; margin-right: 10px;">@Html.ActionLink("Manage Users", "ManagePrincipals")</h4>
            }

        </p>
        <div class="clearfix"></div>
        
        <!-- Enable/Disable extern service call -->
        <div class="input-group input-group-sm">
            <div class="input-group-prepend">
                <span class="input-group" style="width: 200px; font-size: 14px;">Credential-ServiceCall</span>
            </div>
            <div>
                <input type="checkbox"
                       class="bootstrap-switch"
                       name="checkServiceCall"
                       id="chkServiceCall"
                       data-on-text="Ein"
                       data-off-text="Aus"
                       data-on-color="success"
                       data-off-color="primary"
                       data-size="small"
                       checked="@CredentialStoreController.ServiceEnabled"
                       style="font-size: 12px;" />
            </div>
            <span id="ServiceCallSelected" style="visibility: hidden"></span>
        </div>

        <hr />
        @Html.ValidationSummary("", new { @class = "text-danger" })

        <div class="form-group" id="fldCredTypes">
            @Html.LabelFor(m => m.CredentialType, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.CredentialType, Model.CredentialTypeList, new { @class = "form-control", onchange = "UpdateCredentialType(this.value)" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.CredentialKey, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.TextBoxFor(m => m.CredentialKey, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group" id="fldUsername">
            @Html.LabelFor(m => m.UserName, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.TextBoxFor(m => m.UserName, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group" id="fldPassword">
            @Html.LabelFor(m => m.Password, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.PasswordFor(m => m.Password, new { @class = "form-control", @autocomplete = "off" })
            </div>
        </div>
        <div class="form-group" id="fldConfirmPassword">
            @Html.LabelFor(m => m.ConfirmPassword, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control", @autocomplete = "off" })
            </div>
        </div>

        <!-- Authentication protocol -->
        <div class="form-group" id="ddAuthProtocol">
            @Html.LabelFor(m => m.AuthenticationProtocol, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.AuthenticationProtocol, Model.AuthenticationProtocolList, new { @class = "form-control" })
            </div>
        </div>

        <!-- Privacy protocol -->
        <div class="form-group" id="ddPrivacyProtocol">
            @Html.LabelFor(m => m.PrivacyProtocol, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.PrivacyProtocol, Model.PrivacyProtocolList, new { @class = "form-control" })
            </div>
        </div>

        <!-- Ssh passphrase -->
        <div class="form-group" id="fldsshpassphrase">
            @Html.LabelFor(m => m.Sshpassphrase, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.PasswordFor(m => m.Sshpassphrase, new { @class = "form-control" })
            </div>
        </div>

        <!-- Ssh private key -->
        <div class="form-group" id="fldsshprivatekey">
            @Html.LabelFor(m => m.Sshprivatekey, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.TextAreaFor(m => m.Sshprivatekey, new { @class = "form-control", @type = "password", @style = "width: 100% !important; max-width: 100% !important; height: 140px;" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" class="btn btn-default" value="Register" />
            </div>
        </div>
    </div>
}

@section Scripts {
   @Scripts.Render("~/bundles/jqueryval")
}
